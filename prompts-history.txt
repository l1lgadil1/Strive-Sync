# StriveSync Project Development Log

## Project Overview
StriveSync is a gamified self-improvement platform that helps users create and participate in challenges across multiple life dimensions, track their progress, and connect with like-minded individuals.

## Project Structure
The project follows a well-organized structure based on Next.js best practices:

```
src/
├── app/                  # Next.js App Router pages and layouts
├── components/
│   ├── ui/               # Reusable UI components
│   ├── features/         # Feature-specific components
│   ├── layout/           # Layout components
│   └── forms/            # Form components
├── lib/
│   ├── api/              # API client and services
│   ├── utils/            # Utility functions
│   ├── hooks/            # Custom React hooks
│   ├── store/            # Zustand stores
│   ├── constants/        # Application constants
│   └── validations/      # Form validation schemas
├── providers/            # Context providers
├── types/                # TypeScript type definitions
└── styles/               # Global styles
```

## Key Files and Components

### App Structure

1. **src/app/layout.tsx**
   - Root layout component that wraps the entire application
   - Includes font configuration (Geist Sans and Geist Mono)
   - Wraps the application with AppProviders

2. **src/app/page.tsx**
   - Main entry point that redirects to the dashboard page

3. **src/app/dashboard/page.tsx**
   - Dashboard page component that uses AppLayout
   - Renders the DashboardContent component

4. **src/app/challenges/page.tsx**
   - Challenges page component that uses AppLayout
   - Renders the ChallengesContent component

### Providers

5. **src/providers/app-providers.tsx**
   - Wraps the application with necessary providers:
     - Material UI ThemeProvider with custom theme
     - React Query's QueryClientProvider
     - CssBaseline for consistent styling

### State Management

6. **src/lib/store/use-app-store.ts**
   - Global state management using Zustand
   - Manages authentication state (user, isAuthenticated, etc.)
   - Manages application state (theme, sidebar visibility)
   - Provides actions for updating state

### API Integration

7. **src/lib/api/api-client.ts**
   - API client using Axios for making HTTP requests
   - Includes request interceptors for adding auth tokens
   - Includes response interceptors for handling errors
   - Provides typed convenience methods (get, post, put, etc.)

### Types

8. **src/types/common.types.ts**
   - Defines common TypeScript interfaces and types used throughout the application
   - Includes user-related types (IUser)
   - Includes challenge-related types (IChallenge, ChallengeCategory, etc.)
   - Includes API-related types (IPaginatedResponse, IApiResponse, etc.)

### Layout Components

9. **src/components/layout/app-layout.tsx**
   - Main application layout with responsive design
   - Includes AppBar with navigation toggle
   - Includes responsive drawer with Sidebar component
   - Manages sidebar visibility based on screen size

10. **src/components/layout/sidebar.tsx**
    - Navigation sidebar with collapsible menu items
    - Displays navigation links with icons
    - Supports nested navigation items
    - Highlights active route

### Feature Components

11. **src/components/features/dashboard/dashboard-content.tsx**
    - Dashboard content with statistics and challenge cards
    - Displays user stats (completed challenges, streak, etc.)
    - Shows active challenges with progress indicators
    - Includes suggested challenges section
    - Uses Framer Motion for animations

12. **src/components/features/challenges/challenges-content.tsx**
    - Challenges page content with search and filtering
    - Displays challenge cards with details
    - Supports searching by title or description
    - Supports filtering by category
    - Includes favorite toggle functionality
    - Uses Framer Motion for animations

## Technology Stack

### Frontend
- **Framework**: Next.js 15.2.0 with TypeScript
- **UI Libraries**: Material UI, Framer Motion
- **State Management**: Zustand
- **Data Fetching**: TanStack React Query
- **HTTP Client**: Axios

## Current Features

1. **Dashboard**
   - Overview of user statistics
   - Active challenges with progress indicators
   - Suggested challenges

2. **Challenges**
   - Browse challenges with search and filtering
   - View challenge details
   - Toggle favorite challenges

3. **Navigation**
   - Responsive sidebar with collapsible menu items
   - Mobile-friendly navigation

## Mock Data
The application currently uses mock data for:
- User information
- Challenges
- Statistics

These will be replaced with API calls once the backend is implemented.

## Next Steps

1. **Authentication**
   - Implement login/register pages
   - Connect authentication with backend

2. **Challenge Management**
   - Create challenge creation form
   - Implement challenge detail page
   - Add challenge participation functionality

3. **Profile**
   - Create user profile page
   - Add profile editing functionality

4. **Backend Integration**
   - Connect frontend with Spring Boot backend
   - Replace mock data with real API calls
